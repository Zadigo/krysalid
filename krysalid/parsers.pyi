from collections import deque
from functools import cached_property
from html.parser import HTMLParser
from io import StringIO, TextIOWrapper
from typing import Any, Iterator, Union

from krysalid.html_tags import BaseTag
from krysalid.managers import Manager
from krysalid.queryset import QuerySet


class Algorithm(HTMLParser):
    extractor: Extractor = ...
    index: int = ...
    def __init__(self, extractor: Extractor, **kwargs): ...


class Extractor:
    HTML_PAGE: str = ...
    algorithm: Algorithm(Extractor) = ...
    container: deque = ...
    skip_newlines: bool = ...
    track_line_numbers: bool = ...
    remove_white_space: bool = ...
    def __init__(self, skip_newlines: bool = ..., remove_white_space: bool = ..., track_line_numbers: bool = ...) -> None: ...
    def __repr__(self) -> str: ...
    def __getitem__(self, index) -> BaseTag: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __enter__(self, **kwargs) -> Extractor: ...
    def __exit__(self, *args, **kwargs) -> bool: ...
    @cached_property
    def container_as_queryset(self) -> QuerySet: ...
    def recursively_add_tag(self, instance) -> None: ...
    def resolve(self, html: str) -> None: ...
    def start_tag(self, tag, attrs, **kwargs) -> None: ...
    def end_tag(self, tag) -> None: ...
    def internal_data(self, data, **kwargs) -> None: ...
    def self_closing_tag(self, tag, attrs, **kwargs) -> None: ...
    def parse_comment(self, data: str, **kwargs) -> None: ...


class HTMLPageParserDescriptor:
    def __init__(self) -> None: ...
    def __get__(self, instance, cls=None) -> Manager: ...  


class HTMLPageParser:
    objects: HTMLPageParserDescriptor = ...
    def __init__(self, html: Union[str, bytes, TextIOWrapper, StringIO], defer_resolution: bool = ..., skip_newlines: bool = ..., track_line_numbers: bool = ...) -> None: ...
    @property
    def page_has_content(self) -> bool: ...
